// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/chunkserver.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ChunkServer_ReadChunk_FullMethodName  = "/proto.ChunkServer/ReadChunk"
	ChunkServer_WriteChunk_FullMethodName = "/proto.ChunkServer/WriteChunk"
)

// ChunkServerClient is the client API for ChunkServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChunkServerClient interface {
	ReadChunk(ctx context.Context, in *ReadChunkRequest, opts ...grpc.CallOption) (*ReadChunkResponse, error)
	WriteChunk(ctx context.Context, in *WriteChunkRequest, opts ...grpc.CallOption) (*WriteChunkResponse, error)
}

type chunkServerClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkServerClient(cc grpc.ClientConnInterface) ChunkServerClient {
	return &chunkServerClient{cc}
}

func (c *chunkServerClient) ReadChunk(ctx context.Context, in *ReadChunkRequest, opts ...grpc.CallOption) (*ReadChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadChunkResponse)
	err := c.cc.Invoke(ctx, ChunkServer_ReadChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServerClient) WriteChunk(ctx context.Context, in *WriteChunkRequest, opts ...grpc.CallOption) (*WriteChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteChunkResponse)
	err := c.cc.Invoke(ctx, ChunkServer_WriteChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChunkServerServer is the server API for ChunkServer service.
// All implementations must embed UnimplementedChunkServerServer
// for forward compatibility
type ChunkServerServer interface {
	ReadChunk(context.Context, *ReadChunkRequest) (*ReadChunkResponse, error)
	WriteChunk(context.Context, *WriteChunkRequest) (*WriteChunkResponse, error)
	mustEmbedUnimplementedChunkServerServer()
}

// UnimplementedChunkServerServer must be embedded to have forward compatible implementations.
type UnimplementedChunkServerServer struct {
}

func (UnimplementedChunkServerServer) ReadChunk(context.Context, *ReadChunkRequest) (*ReadChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadChunk not implemented")
}
func (UnimplementedChunkServerServer) WriteChunk(context.Context, *WriteChunkRequest) (*WriteChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteChunk not implemented")
}
func (UnimplementedChunkServerServer) mustEmbedUnimplementedChunkServerServer() {}

// UnsafeChunkServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChunkServerServer will
// result in compilation errors.
type UnsafeChunkServerServer interface {
	mustEmbedUnimplementedChunkServerServer()
}

func RegisterChunkServerServer(s grpc.ServiceRegistrar, srv ChunkServerServer) {
	s.RegisterService(&ChunkServer_ServiceDesc, srv)
}

func _ChunkServer_ReadChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServer).ReadChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkServer_ReadChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServer).ReadChunk(ctx, req.(*ReadChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkServer_WriteChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServer).WriteChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkServer_WriteChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServer).WriteChunk(ctx, req.(*WriteChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChunkServer_ServiceDesc is the grpc.ServiceDesc for ChunkServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChunkServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChunkServer",
	HandlerType: (*ChunkServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadChunk",
			Handler:    _ChunkServer_ReadChunk_Handler,
		},
		{
			MethodName: "WriteChunk",
			Handler:    _ChunkServer_WriteChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chunkserver.proto",
}
